// Code generated by go-bindata.
// sources:
// ../api/schema.json
// DO NOT EDIT!

package parse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x55\x4d\x73\xda\x30\x10\xbd\xf3\x2b\x3c\x0a\x87\x76\x26\xd4\xc0\x84\x43\x73\xe9\xb9\xa7\xe6\xce\xd0\x19\x05\x2f\xa0\x0c\x96\x89\x3e\x32\xf5\x80\xff\x7b\x25\x4b\xc8\xb2\x25\x2b\x3e\xe5\x02\xd2\xee\xdb\xa7\xdd\xe7\xd5\xea\x3a\xcb\x32\x34\xe7\xfb\x13\x94\x18\x3d\x67\xe8\x24\xc4\xe5\x39\xcf\xdf\x78\x45\x17\xc6\xfa\xa3\x62\xc7\xbc\x60\xf8\x20\x16\xcb\xa7\xdc\xd8\x1e\xd0\xa3\x8e\x23\x85\x0e\xc9\xcd\x46\xd4\x17\xd0\xdb\xea\xf5\x0d\xf6\xc2\xd8\x2e\xac\xba\x00\x13\x04\xb8\xf2\xe8\xa3\xb4\x0d\x8b\xfd\xc9\x6d\xe3\x81\xad\x1d\x17\x05\x11\xa4\xa2\xf8\xfc\xe2\xd3\x1c\xf0\x99\x83\x03\x29\x36\x01\x8c\xbe\x84\x07\xb5\xee\xbf\xdf\xb6\xab\xc5\xcf\xdd\x76\xa9\x7e\x7e\xdd\xd4\xfa\xc9\xac\xaf\xeb\xe6\xb6\x59\xb6\xcb\xdb\x66\xa5\xfe\xd7\xbb\xef\xf3\x5e\xa8\x97\x18\x66\x0c\xd7\x2e\xaf\xd6\x25\x29\x79\x97\xf0\x5b\x40\xa9\x0f\x14\x4c\x42\xcf\x4d\xac\xe3\xea\x38\xb8\x60\x84\x1e\x51\xe3\x50\xf7\x95\xf9\x6f\x4c\x38\x3a\x93\x0f\x98\xa2\x4d\x44\x58\x13\x0f\x1f\x70\x1e\xab\x83\xca\xf2\x15\x58\xbf\x90\x12\xff\x23\xa5\x2c\x95\x7b\xd5\xb7\x13\x6a\xed\xcb\x2e\xe5\x0e\x81\x78\xcd\xef\x35\x4e\x94\x8c\x44\xf0\xe3\x15\x5a\xef\x94\x1e\x48\x4b\x92\x10\xe6\x73\x79\xd2\x22\x25\xa4\x0a\x04\xb3\x58\xd5\x34\xac\x4e\xa7\x11\x4a\x67\x01\xe9\x9e\xb3\xa0\xb8\xca\x83\x23\xa2\x5a\x5b\x4c\x45\xe1\xcf\x41\x81\xb6\x31\x86\xcf\x64\x76\x28\xf5\xdd\x18\x70\x73\x05\xe6\x0c\x34\x61\x86\x1e\xf2\x02\x0e\x4a\x2c\xfd\x41\x79\x7e\x87\x34\x51\x8e\x40\xba\x8e\x78\x62\x43\xb8\x10\x06\xef\x92\x30\xd0\xb3\x6a\xeb\x12\xdb\x45\xb0\xcd\xe3\x48\x41\x13\x8b\x16\xf8\x98\x70\x7b\xfa\xdb\x61\x30\x02\xfc\x5a\x41\x74\xd2\x51\x31\x42\xe3\x30\xb1\x26\x0b\xfa\x5b\xca\xf6\x4d\x48\xb4\x77\xbc\xf6\x3e\xf5\xa0\xd6\x5e\xc2\xf1\x8b\x3d\x72\xd1\xe2\xf9\xf5\x8c\x7e\x99\x91\xe9\xec\x26\x6e\x34\x87\xe0\x74\x37\x17\x67\x3e\xbb\x66\x6b\x99\x42\x16\xfb\x1c\xfa\xe3\x5f\x2d\x77\x2d\xd8\xbb\x2d\xdd\xf3\xe9\xdd\xac\xe1\x23\x41\xa8\x80\xa3\x37\xc1\xbc\xb9\xb5\xde\x6c\x3a\xab\x9b\x57\xab\x2e\xbb\x59\x33\xfb\x1f\x00\x00\xff\xff\xc8\x88\xd9\x51\x0b\x08\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 2059, mode: os.FileMode(420), modTime: time.Unix(1440641467, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

