// Code generated by go-bindata.
// sources:
// ../api/schema.json
// DO NOT EDIT!

package parse

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xcb\x8e\xda\x30\x14\xdd\xe7\x2b\xa2\x0c\x8b\x56\x82\x06\xd0\xb0\xe8\x6c\xba\xee\xaa\xb3\x47\xa9\xe4\x21\x17\xf0\x28\x71\x18\x3f\x50\x11\xe4\xdf\x6b\xc7\xc1\xf8\x15\x48\xab\x76\x03\xce\x7d\x9e\x7b\x72\x7c\x73\x4e\xd2\x34\x9b\xb0\xcd\x1e\x6a\x94\xbd\xa4\xd9\x9e\xf3\xc3\x4b\x9e\xbf\xb3\x86\xcc\xb4\xf5\x4b\x43\x77\x79\x49\xd1\x96\xcf\xe6\xcf\xb9\xb6\x3d\x65\x53\x95\x87\x4b\x95\x92\xeb\x07\x7e\x3a\x80\x7a\x6c\xde\xde\x61\xc3\xb5\xed\x40\x9b\x03\x50\x8e\x81\x49\x8f\x6a\xa5\x6c\x88\x6f\xf6\xe6\x31\x9e\xd8\xd9\x51\x59\x62\x8e\x1b\x82\xaa\x57\xbb\xcc\x16\x55\x0c\x4c\x90\xac\xc6\x81\x92\xd7\xb0\x51\xe7\xfe\xf9\x69\xbd\x98\x7d\x2d\xd6\x73\xf9\xf3\xed\x22\xcf\xcf\xfa\x7c\x5e\xb6\x97\xd5\xbc\x3b\x5e\x56\x0b\xf9\xbf\x2c\x3e\x4f\x9c\x54\x0b\x18\xa2\x14\x9d\x0c\xae\xce\x25\x08\xfe\x10\xf0\x9d\x43\xad\x1a\x72\x2a\xc0\x71\xe3\xde\x71\x36\x35\x18\xa7\x98\xec\xb2\xd6\x44\x5d\x4f\xfa\xbf\xd5\xe9\xd9\x46\x38\x13\x0c\x40\xb8\xd5\x4f\x3c\xb0\x3e\x89\x23\x69\x8c\xbf\xaa\xde\x43\x50\x0d\xd1\x59\x9c\x91\xd9\x89\x99\xa1\x27\x14\xb6\xf2\x90\x66\x4f\x79\x09\x5b\x4c\xba\xfe\x2c\xbf\x86\xb8\x89\x42\x74\x32\xba\x47\x95\x05\x93\xc2\x87\xc0\x14\x54\xc6\x5a\x23\x9b\xde\x7a\x4f\xfb\x6a\x45\x94\xdb\x0a\x1f\x61\x8c\xee\x06\x98\xc8\x2a\x38\x42\x35\xa4\x11\x22\xea\x37\xa0\xae\x48\x6a\xf4\x0b\xd7\xa2\x96\xee\x85\x6b\x97\x8c\x68\xfb\x3c\x3a\xa3\x14\xc1\x03\xbe\xff\x88\xed\xc4\xeb\xe0\x70\xe8\x8f\xe7\xc1\x88\xb4\xec\x2d\x9a\x63\x55\xbc\x2b\x1c\x16\xed\x2f\xba\x4d\xbe\x3c\x16\x5d\xb0\x85\xf3\xb6\x18\xa4\x50\x29\xb0\xa8\xfc\x31\xe1\xb0\xb3\xe8\xb5\xa8\x5d\xae\x56\x37\xab\x21\x76\xe1\xbc\x79\x8b\xad\xbf\xbd\x58\x81\x4c\xfe\xc5\xcd\x8a\x29\xea\xbe\xa6\x86\x55\x35\xa0\x2b\x47\x59\x32\x46\x6e\x2d\x7a\x1a\x6e\x19\xae\xba\x87\xcb\x2e\xca\xda\x23\xee\x7a\x7f\x43\xe0\x87\xd2\xee\xda\xcf\xbc\x47\x9b\x89\xb0\x04\x33\x74\x09\xae\x21\x6d\x90\xdf\xfa\x60\x46\xbf\x50\x13\xee\xec\xa2\x6b\xa7\x22\xf1\xfb\x44\xc0\x8f\x18\x8e\xa3\xdd\x80\xcb\xe2\xb5\xdf\x0c\x91\xa0\xff\x3f\xb0\x02\x18\x0c\xeb\x1a\x6c\x10\x6d\x1a\xdd\xfa\x71\x19\x86\x73\x3d\xfe\x1a\x84\x17\x2b\x22\xfc\x10\x83\x31\x78\x1f\x0d\xb5\xd8\x92\x36\xf9\x1d\x00\x00\xff\xff\x86\xb6\x08\x3b\x20\x09\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 2336, mode: os.FileMode(420), modTime: time.Unix(1441046511, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

